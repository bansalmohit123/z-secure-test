"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class ShieldMemoryStore {
    constructor(suspicionThreshold = 5, blockDurationMs = 60000) {
        this.suspicionThreshold = suspicionThreshold;
        this.blockDurationMs = blockDurationMs;
        this.store = new Map();
        this.expiryQueue = [];
    }
    async set(key, score, ttl) {
        console.log("set!!!");
        const expiry = Date.now() + ttl;
        const value = { score, expiry, isBlocked: false };
        this.store.set(key, value);
        this.addToExpiryQueue(key, expiry);
    }
    async get(key) {
        const value = this.store.get(key);
        return value && value.expiry > Date.now() ? value : undefined;
    }
    async increment(key, ttl) {
        const value = this.store.get(key);
        const now = Date.now();
        if (!value || value.expiry <= now) {
            // Key does not exist or expired, reset to 1
            await this.set(key, 1, ttl);
            return 1;
        }
        else {
            // Increment score
            value.score += 1;
            // Block the client if threshold exceeded
            if (value.score >= this.suspicionThreshold) {
                value.isBlocked = true;
                value.expiry = now + this.blockDurationMs;
            }
            else {
                value.expiry = now + ttl;
                this.addToExpiryQueue(key, value.expiry);
            }
            this.store.set(key, value);
            return value.score;
        }
    }
    async delete(key) {
        this.store.delete(key);
    }
    async flushExpired() {
        const now = Date.now();
        while (this.expiryQueue.length > 0 &&
            this.expiryQueue[0].expiry <= now) {
            const { key } = this.expiryQueue.shift();
            const value = this.store.get(key);
            if (value && value.expiry <= now) {
                this.store.delete(key);
            }
        }
    }
    async isBlocked(key) {
        const value = this.store.get(key);
        const now = Date.now();
        const isBlocked = value && value.isBlocked && value.expiry > now;
        return isBlocked ? isBlocked : false;
    }
    addToExpiryQueue(key, expiry) {
        this.expiryQueue.push({ key, expiry });
        this.expiryQueue.sort((a, b) => a.expiry - b.expiry); // Min-heap sort
    }
}
exports.default = ShieldMemoryStore;
