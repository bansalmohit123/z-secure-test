"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const scripts_1 = __importDefault(require("../fixed-window/scripts"));
class FixedWindowRedisStore {
    constructor(options) {
        this.localKeys = false;
        this.client = options.client;
        this.prefix = options.prefix ?? 'rl:';
        this.windowMs = options.windowMs ?? 60000; // default 1 minute
        this.resetExpiryOnChange = options.resetExpiryOnChange ?? false;
    }
    init(options) {
        this.windowMs = options.windowMs;
    }
    prefixKey(key) {
        return `${this.prefix}${key}`;
    }
    async get(key) {
        const results = await this.client.eval(scripts_1.default.get, 1, this.prefixKey(key));
        if (!Array.isArray(results))
            throw new TypeError('Expected result to be array of values');
        if (results.length !== 2)
            throw new Error(`Expected 2 replies, got ${results.length}`);
        const totalHits = results[0] === false ? 0 : Number(results[0]);
        const timeToExpire = Number(results[1]);
        return {
            totalHits,
            resetTime: new Date(Date.now() + timeToExpire)
        };
    }
    async increment(key) {
        console.log("redis used!!!");
        const results = await this.client.eval(scripts_1.default.increment, 1, this.prefixKey(key), this.resetExpiryOnChange ? '1' : '0', this.windowMs.toString());
        if (!Array.isArray(results))
            throw new TypeError('Expected result to be array of values');
        if (results.length !== 2)
            throw new Error(`Expected 2 replies, got ${results.length}`);
        const totalHits = results[0] === false ? 0 : Number(results[0]);
        const timeToExpire = Number(results[1]);
        return {
            totalHits,
            resetTime: new Date(Date.now() + timeToExpire)
        };
    }
    async decrement(key) {
        await this.client.decr(this.prefixKey(key));
    }
    async resetKey(key) {
        await this.client.del(this.prefixKey(key));
    }
    async resetAll() {
        // Find all keys with the prefix and delete them
        const keys = await this.client.keys(`${this.prefix}*`);
        if (keys.length > 0) {
            await this.client.del(...keys);
        }
    }
    async shutdown() {
        // If you need any cleanup, do it here
        // For ioredis, typically no special shutdown is needed
    }
}
exports.default = FixedWindowRedisStore;
